# Agentic Workflow Protocol Example (Reference)
# Copy this file to your project as awp.yml and fill in your details.
# Lines starting with '#' are comments and can be removed in your project file.

init: |
  # Onboarding instructions for new contributors or agents.
  - Read awp.yml and README.md to understand the workflow and project goal.
  - Follow the procedures for update, commit, next, and check after each step.
  - Keep awp.yml and README.md in sync with the codebase.
  - Reference the step number in every commit message.
  - If you see blockers or have suggestions, document and address them before moving on.

author: Your Name (Your Org)

goal: |
  # What is the main objective of this project?
  Build something amazing with clear, agentic workflow tracking.

overview:
  # List the main phases or milestones of your project.
  - "1. Setup"
  - "2. Core Logic"
  - "3. API"
  - "4. Testing"
  - "5. Documentation"

outcome: |
  # What does success look like?
  A fully-tested, documented, and production-ready project.

steps:
  - number: 1
    name: "Setup"
    steps:
      - number: 1.1
        description: "Initialize project (e.g., npm init -y)"
        done: false
      - number: 1.2
        description: "Add .gitignore and README.md"
        done: false
  - number: 2
    name: "Core Logic"
    steps:
      - number: 2.1
        description: "Implement main business logic"
        done: false
  - number: 3
    name: "API"
    steps:
      - number: 3.1
        description: "Add API endpoint(s)"
        done: false
  - number: 4
    name: "Testing"
    steps:
      - number: 4.1
        description: "Write unit and integration tests"
        done: false
  - number: 5
    name: "Documentation"
    steps:
      - number: 5.1
        description: "Write/expand README.md"
        done: false

procedures:
  - key: update
    number: 1
    name: "update"
    description: |
      # How to update docs and workflow after each step.
      Review README.md and awp.yml after each step:
      - Run `git status` to see what files have changed.
      - Update README.md and awp.yml to reflect the current state and next actions.
      - Mark steps as done when completed.
      - Keep documentation and workflow tracking always in sync with the codebase.
  - key: commit
    number: 2
    name: "commit"
    description: |
      # How to commit changes for each step.
      Commit your changes for each step:
      - Use the commitStandard for your commit message.
      - Reference the relevant step in every commit message.
      - Keep your git history clear and aligned with your project workflow.
      - Commit and push your changes.
  - key: next
    number: 3
    name: "next"
    description: |
      # How to move to the next step.
      Move to the next step in your workflow:
      - Ensure you have completed both the update and commit procedures for the current step.
      - Check for blockers before proceeding.
      - Identify the next actionable step in awp.yml and begin work on it.
  - key: check
    number: 4
    name: "check"
    description: |
      # How to find the next actionable step.
      Review awp.yml to determine the current actionable step:
      - Find the first step (or sub-step) that is not marked as done.
      - If the step is not marked as done, report the step number and description.
      - Use this as your starting point for the next work session or after a break.

notes:
  # Project-wide reminders, policies, or tips.
  - "Reference the step in every commit."
  - "Update this file as the project progresses."
  - "Check off each item as you complete it."

commitStandard:
  format: "type(scope step): subject"
  types: [feat, fix, docs, test, chore]
  rules:
    - Reference the step in every commit.
    - Use imperative mood.
    - Keep messages concise and descriptive.
  examples:
    - "feat(api 3.1): add API endpoint"
    - "docs(readme 5.1): expand documentation"
