# Agentic Workflow Protocol Example
# Michael Wybraniec, ONE-FRONT 2025
# Contact: michaelwybraniec@me.com
# This file defines the machine- and human-readable workflow for the project.
# It ensures all steps, documentation, and code remain in sync, and enables both agents and humans to track, automate, and maintain project quality.

# AWP for Flask REST API
# Example: Python REST API project

init: |
  - Read awp.yml and README.md to understand the workflow and project goal.
  - Follow the procedures for update, commit, next, and check after each step.
  - Keep awp.yml and README.md in sync with the codebase.
  - Reference the step number in every commit message.
  - If you see blockers or have suggestions, document and address them before moving on.

author: Alex Py

goal: |
  Develop a RESTful API for managing tasks using Flask.

overview:
  - "1. Setup & Environment"
  - "2. API Endpoints"
  - "3. Testing"
  - "4. Documentation"

outcome: |
  A RESTful API for tasks, with endpoints, tests, and documentation.

steps:
  - number: 1
    name: "Setup & Environment"
    steps:
      - number: 1.1
        description: "Create virtualenv and install Flask"
        done: true
      - number: 1.2
        description: "Initialize app.py and requirements.txt"
        done: true
  - number: 2
    name: "API Endpoints"
    steps:
      - number: 2.1
        description: "Implement /tasks GET and POST"
        done: false
      - number: 2.2
        description: "Implement /tasks/<id> PUT and DELETE"
        done: false
  - number: 3
    name: "Testing"
    steps:
      - number: 3.1
        description: "Write unit tests with pytest"
        done: false
  - number: 4
    name: "Documentation"
    steps:
      - number: 4.1
        description: "Write API usage in README.md"
        done: false

procedures:
  - key: update
    number: 1
    name: "update"
    description: |
      Review README.md and awp.yml after each step:
      - Run `git status` to see what files have changed.
      - Update README.md and awp.yml to reflect the current state and next actions.
      - Mark steps as done when completed.
      - Keep documentation and workflow tracking always in sync with the codebase.
  - key: commit
    number: 2
    name: "commit"
    description: |
      Commit your changes for each step:
      - Use the commitStandard for your commit message.
      - Reference the relevant step in every commit message.
      - Keep your git history clear and aligned with your project workflow.
      - Commit and push your changes.
  - key: next
    number: 3
    name: "next"
    description: |
      Move to the next step in your workflow:
      - Ensure you have completed both the update and commit procedures for the current step.
      - Check for blockers before proceeding.
      - Identify the next actionable step in awp.yml and begin work on it.
  - key: check
    number: 4
    name: "check"
    description: |
      Review awp.yml to determine the current actionable step:
      - Find the first step (or sub-step) that is not marked as done.
      - If the step is not marked as done, report the step number and description.
      - Use this as your starting point for the next work session or after a break.

notes:
  - "Reference the step in every commit."
  - "Update this file as the project progresses."
  - "Check off each item as you complete it."

commitStandard:
  format: "type(scope step): subject"
  types: [feat, fix, docs, test, chore]
  rules:
    - Reference the step in every commit.
    - Use imperative mood.
    - Keep messages concise and descriptive.
  examples:
    - "feat(api 2.1): add GET/POST endpoints"
    - "test(api 3.1): add unit tests for endpoints" 