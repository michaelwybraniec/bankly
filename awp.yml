# Agentic Workflow Policy for Bankly
# Michael Wybraniec, ONE-FRONT 2025
# This file defines the machine- and human-readable workflow for the project.
# It ensures all steps, documentation, and code remain in sync, and enables both agents and humans to track, automate, and maintain project quality.

author: Michael Wybraniec

goal: |
  Initialize and develop a production-grade, functional banking backend with best practices, automation, and clear documentation.

overview:
  - "1. Setup & Tooling"
  - "2. Domain Logic"
  - "3. Database (PostgreSQL + Prisma)"
  - "4. GraphQL API"
  - "5. Kafka Integration"
  - "6. Consumer Service (Audit Logger)"
  - "7. CI/CD Pipeline"
  - "8. Testing"
  - "9. Documentation"
  - "10. Optional Enhancements"
  
outcome: |
  A fully-tested, documented, event-driven banking backend, showcasing senior-level skills in architecture, functional programming, CI/CD, and clean API design.

steps:
  - number: 1
    name: "Setup & Tooling"
    done: true
    steps:
      - number: 1.1
        description: "Initialize project with yarn init -y"
        done: true
      - number: 1.2
        description: "Add .gitignore and README.md"
        done: true
      - number: 1.3
        description: "Install dependencies"
        done: true
        steps:
          - number: 1.3.1
            description: "Install fp-ts, io-ts, zod, graphql, @apollo/server, graphql-scalars, kafkajs, pg, prisma, dotenv"
            done: true
          - number: 1.3.2
            description: "Install dev dependencies: typescript, ts-node, jest, ts-jest, eslint, prettier, tsc-alias"
            done: true
      - number: 1.4
        description: "Add and configure project files"
        done: true
        steps:
          - number: 1.4.1
            description: "tsconfig.json (strict mode, path aliases)"
            done: true
          - number: 1.4.2
            description: ".eslintrc, .prettierrc"
            done: true
          - number: 1.4.3
            description: ".env, .env.example"
            done: true
          - number: 1.4.4
            description: "Initialize Prisma: npx prisma init"
            done: true
          - number: 1.4.5
            description: "Initialize Jest: npx ts-jest config:init"
            done: true
      - number: 1.5
        description: "Create folder structure"
        done: true
        steps:
          - number: 1.5.1
            description: "src/ (main code)"
            done: true
          - number: 1.5.2
            description: "tests/ (unit/integration tests)"
            done: true
          - number: 1.5.3
            description: "prisma/ (Prisma schema/migrations)"
            done: true
          - number: 1.5.4
            description: "config/ (configuration files)"
            done: true
  - number: 2
    name: "Domain Logic"
    done: true
    steps:
      - number: 2.1
        description: "Model Account and Transaction types"
        done: true
      - number: 2.2
        description: "Implement pure, functional logic for transferFunds using fp-ts"
        done: true
      - number: 2.3
        description: "Add runtime validation (io-ts or zod)"
        done: true
  - number: 3
    name: "Database (PostgreSQL + Prisma)"
    done: true
    steps:
      - number: 3.1
        description: "Define Prisma schema for accounts and transactions:"
        done: true
        steps:
          - number: 3.1.1
            description: "Update prisma/schema.prisma with Account and Transaction models"
            done: true
          - number: 3.1.2
            description: "Add schema code block to README for reference"
            done: true
          - number: 3.1.3
            description: "Document ER diagram in README"
            done: true
      - number: 3.2
        description: "Setup and run Prisma migrations"
        done: true
      - number: 3.3
        description: "Create persistence adapters with transaction-safe updates"
        done: true
  - number: 4
    name: "GraphQL API"
    done: true
    steps:
      - number: 4.1
        description: "Setup Apollo Server"
        done: true
      - number: 4.2
        description: "Add mutation: transferMoney(from, to, amount)"
        done: true
      - number: 4.3
        description: "Use functional resolver pipelines (TaskEither, pipe)"
        done: true
      - number: 4.4
        description: "Expose GraphQL Playground for API exploration"
        done: true
  - number: 5
    name: "Kafka Integration"
    done: true
    steps:
      - number: 5.1
        description: "Setup Kafka producer with KafkaJS"
        done: true
      - number: 5.2
        description: "Emit MoneyTransferred event after successful transfers"
        done: true
  - number: 6
    name: "Consumer Service (Audit Logger)"
    done: false
    steps:
      - number: 6.1
        description: "Build a separate Kafka consumer"
        done: false
      - number: 6.2
        description: "Log or process incoming events"
        done: false
      - number: 6.3
        description: "Demonstrate microservice readiness"
        done: false
  - number: 7
    name: "CI/CD Pipeline"
    done: false
    steps:
      - number: 7.1
        description: "Configure GitHub Actions workflow"
        done: false
      - number: 7.2
        description: "Add steps: install, lint, test, build"
        done: false
      - number: 7.3
        description: "Auto-run on push & PR"
        done: false
      - number: 7.4
        description: "(Optional) Add release automation (e.g., version update script, semantic release)"
        done: false
      - number: 7.5
        description: "Add Dockerfile and .dockerignore for containerization"
        done: false
  - number: 8
    name: "Testing"
    done: false
    steps:
      - number: 8.1
        description: "Write unit tests for domain logic"
        done: false
      - number: 8.2
        description: "Write integration tests for GraphQL + DB + Kafka"
        done: false
      - number: 8.3
        description: "Use mocks and property-based tests (fast-check)"
        done: false
  - number: 9
    name: "Documentation"
    done: false
    steps:
      - number: 9.1
        description: "Write/expand README.md (overview, setup, usage)"
        done: false
      - number: 9.2
        description: "Create /docs/ for:"
        done: false
        steps:
          - number: 9.2.1
            description: "Architecture"
            done: false
          - number: 9.2.2
            description: "GraphQL schema"
            done: false
          - number: 9.2.3
            description: "Kafka event schema"
            done: false
          - number: 9.2.4
            description: "CI/CD pipeline"
            done: false
          - number: 9.2.5
            description: "API usage examples"
            done: false
  - number: 10
    name: "Optional Enhancements"
    done: false
    steps:
      - number: 10.1
        description: "Add Docker Compose for DB + Kafka"
        done: false
      - number: 10.2
        description: "Add authentication (JWT or API keys)"
        done: false
      - number: 10.3
        description: "Add monitoring/logging"
        done: false
      - number: 10.4
        description: "Add REST bridge (optional)"
        done: false

procedures:
  - key: update
    number: 1
    name: "update"
    description: |
      Review README.md and awp.yml after each step:
      - Run `git status` to see what files have changed.
      - For README.md: Check if it needs a full update or if new features need to be documented.
      - For awp.yml: Ensure all steps, checkboxes, and context match the actual project progress.
      - Update both files as needed to reflect the current state and next actions.
      - If you made changes and the user accepted them, update the relevant section in awp.yml to reflect this.
      - The goal is to keep documentation and workflow tracking always in sync with the codebase.
  - key: commit
    number: 2
    name: "commit"
    description: |
      Commit your changes for each each step:
      - Run `git status` to review what files have changed and are staged for commit.
      - Use the Commits standard in awp.yml commitStandard for your commit message.
      - Reference the relevant step in awp.yml in every commit message.
      - Review the files you added or changed to make sure the commit message is accurate and descriptive.
      - The goal is to keep your git history clear, traceable, and aligned with your project workflow.
      - Commit and push your changes to the repository.
  - key: next
    number: 3
    name: "next"
    description: |
      Move to the next step in your workflow:
      - Ensure you have completed both the awp:update and awp:commit procedures for the current step.
      - Review your progress and check for any blockers or critical points before proceeding.
      - If there are blockers, document them and address as needed before moving on.
      - Once ready, identify the next actionable step in awp.yml and begin work on it.
      - The goal is to keep your workflow continuous, transparent, and always aligned with your project roadmap.
  - key: check
    number: 4
    name: "check"
    description: |
      Review awp.yml to determine the current actionable step.
      - Find the first step (or sub-step) that is not marked as done. 
      - done is true or false.
      - Marked as done means that the step is completed and the documentation is updated.
      - If the step is not marked as done, report the step number, description, and any relevant context.
      - Use this as your starting point for the next work session or after a break.

notes:
  - "Follow aws:commitStandard for all commit messages."
  - "Update this file as the project progresses."
  - "Check off each item as you complete it."

commitStandard:
  format: |
    type(scope step): subject
  types:
    - chore
    - feat
    - fix
    - docs
    - refactor
    - test
    - ci
    - build
  rules:
    - Reference the step being followed in awp.yml in every commit.
    - Use lower case and imperative mood for the subject.
    - Keep messages concise and descriptive.
  examples:
    - "feat(api 4.2): add money transfer mutation"
    - "fix(domain 2.2): correct balance calculation"
    - "chore(setup 1.4.2): add ESLint and Prettier config"
    - "docs(readme 9.1): add architecture diagram"
  why: |
    - Enables automated changelogs and semantic releases
    - Makes git history easier to read and search
    - Encourages clear, consistent communication
    - Ensures traceability to project strategy steps

version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1